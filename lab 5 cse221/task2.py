# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OrdsMtn4-3PbqUvoBvmhkaVFsM6s5k-g
"""

import heapq

input = open('input2_3.txt', 'r')
output = open('output2_3.txt', 'w')
n=input.readline().split()
N=int(n[0])
M=int(n[1])

def coursebfs(N, prereq):
    indegree=[0]*(N + 1)
    list1=[]
    for i in range(N + 1):
      list1.append([])

    for courses in prereq :
        course1, course2 = courses
        list1[course1].append(course2)
        indegree[course2] += 1

    min = []
    for j in range(1, N + 1):
        if indegree[j]==0:
            heapq.heappush(min, j)


    sequence= []
    while min:
        course = heapq.heappop(min)
        sequence.append(course)


        for adjacent in list1[course]:
            indegree[adjacent] -= 1
            if indegree[adjacent] == 0:
                heapq.heappush(min, adjacent)


    if len(sequence)!=N:
        return "IMPOSSIBLE"
    else:
        return sequence


prereq=[]
for val in range(M):
   prereq.append(list(map(int, input.readline().strip().split())))

ans = coursebfs(N, prereq)
if ans!="IMPOSSIBLE":
    for course in ans:
        output.write(str(course)+" ")
else:
   output.write(ans)