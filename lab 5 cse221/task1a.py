# -*- coding: utf-8 -*-
"""task1A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6hSq5z_AgMGmSxzz-qftmzvpmE0CW06
"""

input = open('input1a_1.txt', 'r')
output = open('output1a_1.txt', 'w')
n=input.readline().split()
N=int(n[0])
M=int(n[1])


def depth_search(node,list1, visit, stack1, nosoln):
    if nosoln[0]==True:
        return
    visit[node] = "visiting"

    for adjacent in list1[node]:

        if visit[adjacent]=="not visited":
            depth_search(adjacent, list1, visit, stack1, nosoln)
            if nosoln[0]:
                return
        elif visit[adjacent] == "visiting":
            nosoln[0] = True
            return
    stack1.append(node)
    visit[node] = "visited"


def courseorder(N, prereq):

    list1=[]
    for i in range(N):
      list1.append([])
    for val in prereq:
        course1=val[0]
        course2=val[1]
        list1[course1-1].append(course2-1)

    visit= ["not visited"] * N
    nosoln = [False]
    stack1 = []

    for i in range(N):
        if visit[i]=="not visited":
            depth_search(i,list1, visit, stack1, nosoln)
            if nosoln[0]:
                break
    if nosoln[0]==False:
        return stack1[::-1]
    else:
        return "IMPOSSIBLE"



prereq=[]
for val in range(M):
  prereq.append(list(map(int, input.readline().strip().split())))
ans = courseorder(N, prereq)


if ans!="IMPOSSIBLE":
    for seq in ans:
        output.write(str(int(seq)+1)+" ")
else:
    output.write(ans)

input.close()
output.close()