# -*- coding: utf-8 -*-
"""task4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10g_HTkWb8DriLu-0sM0wk7gGUaeqllmm
"""

input=open("input4_4.txt","r")
output=open("output4_4.txt","w")
n=input.readline().split()

new=[]
for val in range(int(n[1])):
  new.append(input.readline().split())

adjacent_list={}
for u,v in new:
  if u not in adjacent_list:
    adjacent_list[u]=[v]
  else:
    adjacent_list[u].append(v)


visited=set()
stack1=set()

def dfs_traversal(city):

  if city not in stack1:
    stack1.add(city)
  else:
     return True
  if city not in visited:
    visited.add(city)
  else:
    return False
  for val in adjacent_list.get(city,[]): # [] handles the city that doesn't have any child city
    if val not in  visited:
      if dfs_traversal(val):
        return True
    elif val in stack1:
      return True
  stack1.remove(city)
  return False


cycle=False
for city in adjacent_list:
  if city not in visited:
    if dfs_traversal(city)==True:
      cycle=True
      break

if cycle==True:
   output.write("YES")
else:
   output.write("NO")
input.close()
output.close()