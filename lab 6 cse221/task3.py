# -*- coding: utf-8 -*-
"""LAB6 TASK 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1HC5Rff6JQkHMkMf4lrtDDFriMa7r_j
"""

import heapq

def dijkstra(graph, start, end):
    priority = [(0, start)]
    max_dangers = {}
    for node in graph:
      max_dangers[node] = float('inf')
    max_dangers[start] = 0

    while priority:
        m_danger, curr = heapq.heappop(priority)

        if max_dangers[curr]>m_danger :
            continue

        if curr == end:
            return m_danger



        for adjacent, danger in graph[curr]:
            new_danger = max(m_danger, danger)
            if max_dangers[adjacent]>new_danger :
                heapq.heappush(priority, (new_danger, adjacent))
                max_dangers[adjacent] = new_danger


    return "Impossible"

def main():
    input = open('input3_1.txt', 'r')
    output = open('output3_1.txt', 'w')


    N, M = map(int, input.readline().split())
    graph = {}
    for i in range(1, N + 1):
      graph[i] = []
    for j in range(M):
        u, v, w = map(int, input.readline().split())
        graph[u].append((v, w))

    min_danger= dijkstra(graph, 1, N)
    output.write(str(min_danger))
    input.close()
    output.close()
if __name__ == "__main__":
  main()