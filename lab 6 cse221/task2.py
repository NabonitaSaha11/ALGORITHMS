# -*- coding: utf-8 -*-
"""LAB6 TASK 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19FVnVcb7lALQkcoLAhenDAjqcZ_CvLAY
"""

import heapq

def dijkstra(graph, start):
    distance_set = {}
    for node in graph:
       distance_set[node] = float('inf')
    distance_set[start] = 0

    priority = [(0, start)]

    while priority:
        curr_dis, curr_node = heapq.heappop(priority)
        if distance_set[curr_node]<curr_dis:
            continue

        for adjacent, weight in graph[curr_node].items():
            distance = weight+ curr_dis

            if distance_set[adjacent]>distance:
                heapq.heappush(priority,(distance, adjacent))
                distance_set[adjacent] = distance
    return distance_set
def meetingpoint(graph, friend1, friend2):
    distance1 = dijkstra(graph, friend1)
    distance2 = dijkstra(graph, friend2)

    meeting_points = []
    for node in distance1:
      if distance1[node] != float('inf') and distance2[node] != float('inf'):
        max_distance = max(distance1[node], distance2[node])
        meeting_points.append((max_distance, node))

    if len(meeting_points)==0:
        return "Impossible"
    else:
        min_time, node = min(meeting_points)
        return f"Time {min_time} \nNode {node}"

def main():
        inp=open('input2_3.txt','r')
        out=open('output2_3.txt','w')
        M, N = map(int, inp.readline().strip().split())
        graph = {}
        for i in range(1, M + 1):
           graph[i] = {}

        for j in range(N):
            u, v, weight = map(int, inp.readline().strip().split())
            graph[u][v] = weight
        friend1, friend2 = map(int, inp.readline().strip().split())
        meet = meetingpoint(graph, friend1, friend2)
        print(meet, file=out)
        inp.close()
        out.close()

if __name__ == "__main__":
    main()